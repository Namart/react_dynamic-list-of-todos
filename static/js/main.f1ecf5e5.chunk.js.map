{"version":3,"sources":["components/TodoList/TodoList.jsx","components/CurrentUser/CurrentUser.jsx","api/api.js","App.jsx","index.js"],"names":["TodoList","todos","selectedUserId","selectUser","useState","query","setQuery","type","setType","visibleTodos","filter","todo","title","includes","completed","className","value","onChange","event","target","name","id","onClick","map","key","classnames","TodoList__item","checked","userId","button","CurrentUser","clearUser","user","setUser","useEffect","fetch","then","response","json","result","data","getUser","email","phone","App","setTodos","setUserId","ReactDOM","render","document","getElementById"],"mappings":"gVAMaA,G,MAAW,SAAC,GAIlB,IAHLC,EAGI,EAHJA,MACAC,EAEI,EAFJA,eACAC,EACI,EADJA,WAEA,EAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAwBF,mBAAS,OAAjC,mBAAOG,EAAP,KAAaC,EAAb,KAEMC,EAAeR,EAClBS,QAAO,SAAAC,GAAI,OAAIA,EAAKC,SACpBF,QAAO,SAAAC,GAAI,OAAIA,EAAKC,MAAMC,SAASR,MACnCK,QAAO,SAACC,GACP,MAAa,cAATJ,EACKI,EAAKG,UAGD,WAATP,GACMI,EAAKG,UAGRH,KAGX,OACE,yBAAKI,UAAU,YACb,sCACA,2BACER,KAAK,OACLS,MAAOX,EACPY,SAAU,SAAAC,GAAK,OAAIZ,EAASY,EAAMC,OAAOH,UAE3C,4BACEI,KAAK,YACLC,GAAG,YACHC,QAAS,SAAAJ,GAAK,OAAIV,EAAQU,EAAMC,OAAOH,SAEvC,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,aAAd,aACA,4BAAQA,MAAM,UAAd,WAEF,yBAAKD,UAAU,4BACb,wBAAIA,UAAU,kBACXN,EAAac,KAAI,SAAAZ,GAAI,OACpB,wBACEa,IAAKb,EAAKU,GACVN,UAAWU,IAAW,CACpBC,gBAAgB,EAChB,0BAA2Bf,EAAKG,UAChC,6BAA8BH,EAAKG,aAGrC,+BACE,2BACEP,KAAK,WACLoB,QAAShB,EAAKG,YAEhB,2BAAIH,EAAKC,QAEVD,EAAKiB,QACN,4BACErB,KAAK,SACLQ,UAAWU,IAAW,CACpB,yBAAyB,EACzBI,QAAQ,EACR,kCACA3B,IAAmBS,EAAKiB,SAE1BN,QAAS,kBAAMnB,EAAWQ,EAAKiB,UARjC,YAWGjB,EAAKiB,iBCrETE,G,MAAc,SAAC,GAA2B,IAAzBF,EAAwB,EAAxBA,OAAQG,EAAgB,EAAhBA,UACpC,EAAwB3B,qBAAxB,mBAAO4B,EAAP,KAAaC,EAAb,KAOA,OALAC,qBAAU,YCHW,SAAAN,GAAM,OAAIO,MAAM,GAAD,OANrB,uCAMqB,YAAgBP,IACnDQ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAM,OAAIA,EAAOC,SDErBC,CAAQb,GACLQ,KAAKH,KACP,CAACL,IAGF,yBAAKb,UAAU,eACb,wBAAIA,UAAU,sBACZ,+CAEG,IACAa,IAIJI,GACC,oCACE,wBAAIjB,UAAU,qBAAqBiB,EAAKZ,MACxC,uBAAGL,UAAU,sBAAsBiB,EAAKU,OACxC,uBAAG3B,UAAU,sBAAsBiB,EAAKW,OACxC,4BACEpC,KAAK,SACLQ,UAAU,SACVO,QAASS,GAHX,aEoBKa,EAzCH,WACV,MAA0BxC,mBAAS,IAAnC,mBAAOH,EAAP,KAAc4C,EAAd,KACA,EAAoCzC,mBAAS,GAA7C,mBAAOF,EAAP,KAAuB4C,EAAvB,KAMAZ,qBAAU,WDdY,IAAAtB,KCeXX,EDfoBkC,MAAM,GAAD,OAHrB,uCAGqB,YAAgBvB,IACnDwB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAM,OAAIA,EAAOC,SCclBJ,KAAKS,KACP,IAMH,OACE,yBAAK9B,UAAU,OACb,yBAAKA,UAAU,gBACb,kBAAC,EAAD,CACEd,MAAOA,EACPC,eAAgBA,EAChBC,WAnBW,SAACyB,GAClBkB,EAAUlB,OAsBR,yBAAKb,UAAU,gBACb,yBAAKA,UAAU,0BACZb,EACC,kBAAC,EAAD,CACE0B,OAAQ1B,EACR6B,UAnBM,WAChBe,EAAU,MAoBA,uBCvCdC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.f1ecf5e5.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport classnames from 'classnames';\n\nimport './TodoList.scss';\n\nexport const TodoList = ({\n  todos,\n  selectedUserId,\n  selectUser,\n}) => {\n  const [query, setQuery] = useState('');\n  const [type, setType] = useState('all');\n\n  const visibleTodos = todos\n    .filter(todo => todo.title)\n    .filter(todo => todo.title.includes(query))\n    .filter((todo) => {\n      if (type === 'completed') {\n        return todo.completed;\n      }\n\n      if (type === 'active') {\n        return !todo.completed;\n      }\n\n      return todo;\n    });\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n      <input\n        type=\"text\"\n        value={query}\n        onChange={event => setQuery(event.target.value)}\n      />\n      <select\n        name=\"todoState\"\n        id=\"todoState\"\n        onClick={event => setType(event.target.value)}\n      >\n        <option value=\"all\">All</option>\n        <option value=\"completed\">Completed</option>\n        <option value=\"active\">Active</option>\n      </select>\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {visibleTodos.map(todo => (\n            <li\n              key={todo.id}\n              className={classnames({\n                TodoList__item: true,\n                'TodoList__item--checked': todo.completed,\n                'TodoList__item--unchecked': !todo.completed,\n              })}\n            >\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={todo.completed}\n                />\n                <p>{todo.title}</p>\n              </label>\n              {todo.userId && (\n              <button\n                type=\"button\"\n                className={classnames({\n                  'TodoList__user-button': true,\n                  button: true,\n                  'TodoList__user-button--selected':\n                  selectedUserId === todo.userId,\n                })}\n                onClick={() => selectUser(todo.userId)}\n              >\n                User&nbsp;#\n                {todo.userId}\n              </button>\n              )}\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nTodoList.propTypes = {\n  todos: propTypes.arrayOf({\n    userId: propTypes.string.isRequired,\n    title: propTypes.string.isRequired,\n    completed: propTypes.bool.isRequired,\n  }).isRequired,\n  selectedUserId: propTypes.string.isRequired,\n  selectUser: propTypes.func.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport propTypes from 'prop-types';\n\nimport './CurrentUser.scss';\n\nimport { getUser } from '../../api/api';\n\nexport const CurrentUser = ({ userId, clearUser }) => {\n  const [user, setUser] = useState();\n\n  useEffect(() => {\n    getUser(userId)\n      .then(setUser);\n  }, [userId]);\n\n  return (\n    <div className=\"CurrentUser\">\n      <h2 className=\"CurrentUser__title\">\n        <span>\n          Selected user:\n          {' '}\n          {userId}\n        </span>\n      </h2>\n\n      {user && (\n        <>\n          <h3 className=\"CurrentUser__name\">{user.name}</h3>\n          <p className=\"CurrentUser__email\">{user.email}</p>\n          <p className=\"CurrentUser__phone\">{user.phone}</p>\n          <button\n            type=\"button\"\n            className=\"button\"\n            onClick={clearUser}\n          >\n            Clear\n          </button>\n        </>\n      )}\n    </div>\n  );\n};\n\nCurrentUser.propTypes = {\n  userId: propTypes.number.isRequired,\n  clearUser: propTypes.func.isRequired,\n};\n","const TodosURL = 'https://mate-api.herokuapp.com/todos';\nconst UsersURL = 'https://mate-api.herokuapp.com/users';\n\nexport const getTodos = title => fetch(`${TodosURL}/${title}`)\n  .then(response => response.json())\n  .then(result => result.data);\n\nexport const getUser = userId => fetch(`${UsersURL}/${userId}`)\n  .then(response => response.json())\n  .then(result => result.data);\n","import React, { useState, useEffect } from 'react';\n\nimport './App.scss';\nimport './styles/general.scss';\n\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api/api';\n\nconst App = () => {\n  const [todos, setTodos] = useState([]);\n  const [selectedUserId, setUserId] = useState(0);\n\n  const selectUser = (userId) => {\n    setUserId(userId);\n  };\n\n  useEffect(() => {\n    getTodos(todos)\n      .then(setTodos);\n  }, []);\n\n  const clearUser = () => {\n    setUserId(0);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList\n          todos={todos}\n          selectedUserId={selectedUserId}\n          selectUser={selectUser}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              userId={selectedUserId}\n              clearUser={clearUser}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}